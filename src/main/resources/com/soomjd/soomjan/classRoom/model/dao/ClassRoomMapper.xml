<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.soomjd.soomjan.classRoom.model.dao.ClassRoomMapper">
    
    <resultMap type="com.soomjd.soomjan.classRoom.model.dto.ClassDTO" id="classResultMap">
    	<id column="CLASS_CODE" property="classCode"/>
    	<result column="CREATE_DATE" property="createDate"/>
    	<result column="CONTENTS" property="contents"/>
    	<result column="TAG" property="tag"/>
    	<result column="CATEGORY_CODE" property="categoryCode"/>
    	<result column="EMAIL" property="email"/>
    	<result column="BOARD_TYPE" property="boardType"/>
    	<result column="VIEWS" property="views"/>
    	<result column="MAX_COUNT" property="maxCount"/>
    	<result column="TITLE" property="title"/>
    	<result column="PRICE" property="price"/>
    	<result column="FILE_PATH" property="filePath"/>
    	<result column="ORG_FILE_PATH" property="orgFilePath"/>
    	<result column="NICKNAME" property="nickName" />
    </resultMap>
    
    <resultMap type="com.soomjd.soomjan.classRoom.model.dto.LearningPostDTO" id="learningPostResultMap">
    	<id column="POST_CODE" property="postCode"/>
    	<result column="WRITE_DATE" property="writeDate"/>
    	<result column="RE_DATE" property="reDate"/>
    	<result column="CONTENTS" property="contents"/>
    	<result column="EMAIL" property="email"/>
    	<result column="CLASS_CODE" property="classCode"/>
    	<result column="TITLE" property="title"/>
    	<result column="IS_DELETED" property="isDeleted"/>
    	<result column="NICKNAME" property="nickName" />
    </resultMap>
    
    <resultMap type="com.soomjd.soomjan.classRoom.model.dto.MokchaDTO" id="mokchaResultMap">
    	<id column="MOKCHA_CODE" property="mokchaCode"/>
    	<result column="MOKCHA_NAME" property="mokchaName"/>
    	<result column="WRITE_DATE" property="writeDate"/>
    	<result column="CONTENTS" property="contents"/>
    	<result column="CLASS_CODE" property="classCode"/>
    </resultMap>
    
    <resultMap type="com.soomjd.soomjan.classRoom.model.dto.ClassFileDTO" id="fileResultMap">
    	<id column="FILE_CODE" property="fileCode"/>
    	<result column="FILE_PATH" property="filePath"/>
    	<result column="EMAIL" property="email"/>
    	<result column="ORG_FILE_PATH" property="orgFilePath"/>
    	<result column="WRITE_DATE" property="writeDate"/>
    	<result column="MOKCHA_CODE" property="mokchaCode"/>
    	<result column="POST_CODE" property="postCode"/>
    	<result column="IS_DELETED" property="isDeleted"/>
    	<result column="NICKNAME" property="nickName"/>
    </resultMap>
    
    <resultMap type="com.soomjd.soomjan.classRoom.model.dto.ReviewDTO" id="reviewResultMap">
    	<id column="REVIEW_CODE" property="rvCode"/>
    	<result column="WRITE_DATE" property="writeDate"/>
    	<result column="STAR" property="star"/>
    	<result column="CONTENTS" property="contents"/>
    	<result column="IS_DELETED" property="isDelete"/>
    	<result column="CLASS_CODE" property="classCode"/>
    	<result column="EMAIL" property="email"/>
    	<result column="NICKNAME" property="nickName"/>
    </resultMap>
    
    <!-- 클래스 코드로 클래스 정보 조회  by 임예람 -->
    <select id="selectClassByClassCode" resultMap="classResultMap">
    	SELECT
    			  C.CLASS_CODE
		    	, C.CREATE_DATE
		    	, C.CONTENTS
		    	, C.TAG
		    	, C.CATEGORY_CODE
		    	, C.EMAIL
		    	, C.BOARD_TYPE
		    	, C.VIEWS
		    	, C.MAX_COUNT
		    	, C.TITLE
		    	, C.PRICE
		    	, C.FILE_PATH
		    	, C.ORG_FILE_PATH
		    	, J.NICKNAME
    	  FROM CLASS_TBL C
    	  JOIN JANDI_TBL J ON (C.EMAIL = J.EMAIL)
    	 WHERE C.CLASS_CODE = #{ classCode }
    	   AND C.IS_DELETED = 'N'
    	  ORDER BY C.CREATE_DATE DESC
    </select>
    
    <!-- 해당 클래스를 듣는 회원의 이메일 목록 조회 by 임예람  -->
    <select id="selectCurrentMemberList" resultType="hashmap">
    	SELECT EMAIL
    	  FROM PURCHASE_CLASS_TBL
    	 WHERE STATUS = 'Y'
    	   AND CLASS_CODE = #{ classCode }
    </select>
    
    <!-- 해당 클래스의 목차 목록 조회  by 임예람 , 양효진 -->
    <select id="selectMokchaList" resultMap="mokchaResultMap" parameterType="hashMap">
    	SELECT
    	      B.RNUM
   	     	, B.MOKCHA_CODE
		 	, B.MOKCHA_NAME
			, B.WRITE_DATE
			, B.CONTENTS
			, B.CLASS_CODE
    	 FROM (SELECT ROWNUM RNUM
    	 	        , A.MOKCHA_CODE
				 	, A.MOKCHA_NAME
					, A.WRITE_DATE
					, A.CONTENTS
					, A.CLASS_CODE
    	 	     FROM (SELECT
			    		   M.MOKCHA_CODE
					 	 , M.MOKCHA_NAME
						 , M.WRITE_DATE
						 , M.CONTENTS
						 , M.CLASS_CODE
					 FROM LECTURE_MOKCHA_TBL M
					WHERE M.CLASS_CODE = #{ classCode }
					  AND M.IS_DELETED = 'N'
					ORDER BY M.WRITE_DATE DESC
					)A
			<![CDATA[
		        WHERE ROWNUM <= #{ selectCriteria.endRow } 
		        ]]>	
			  	) B
			  	WHERE B.RNUM >= #{ selectCriteria.startRow }
    </select>
    
    <!-- 해당 클래스의 학습방 게시물 목록 조회 by 임예람, 양효진 -->
    <select id="selectLearningPostList" resultMap="learningPostResultMap" parameterType="hashMap" >
    	SELECT
    	      B.RNUM
   	     	, B.POST_CODE
			, B.WRITE_DATE
			, B.RE_DATE
			, B.IS_DELETED
			, B.CONTENTS
			, B.EMAIL
			, B.CLASS_CODE
			, B.TITLE
			, B.NICKNAME
    	 FROM (SELECT ROWNUM RNUM
   	 	      		 , A.POST_CODE
					 , A.WRITE_DATE
					 , A.RE_DATE
					 , A.IS_DELETED
					 , A.CONTENTS
					 , A.EMAIL
					 , A.CLASS_CODE
					 , A.TITLE
					 , A.NICKNAME
    	 	     FROM (SELECT
			    		   L.POST_CODE
						 , L.WRITE_DATE
						 , L.RE_DATE
						 , L.IS_DELETED
						 , L.CONTENTS
						 , L.EMAIL
						 , L.CLASS_CODE
						 , L.TITLE
						 , J.NICKNAME
					  FROM LEARNING_TBL L
					  JOIN JANDI_TBL J ON (J.EMAIL = L.EMAIL)
					 WHERE L.CLASS_CODE = #{ classCode }
					   AND L.IS_DELETED = 'N'
					  ORDER BY L.WRITE_DATE DESC
					)A
			<![CDATA[
		        WHERE ROWNUM <= #{ selectCriteria.endRow } 
		        ]]>	
			  	) B
			  	WHERE B.RNUM >= #{ selectCriteria.startRow }
    	
    </select>
    
    <!-- 해당 클래스의 채팅방 목록 조회  by 임예람 -->
    <select id="selectChatRoomList" resultType="hashMap" parameterType="hashMap">
    	SELECT 
    		   C.CHAT_CODE
    		 , C.EMAIL
    		 , C.CLASS_CODE
    		 , S.NICKNAME
    	  FROM CLASS_CHAT_ROOM_TBL C
    	  JOIN SSACK_TBL S ON (C.EMAIL = S.EMAIL)
    	 WHERE C.CLASS_CODE = #{ classCode }
    	   AND C.EMAIL != #{ email }
    </select>
    
    <!-- 클래스 생성 하기 by 임예람 -->
    <insert id="registClass" parameterType="ClassDTO">
    	INSERT INTO CLASS_TBL
    	(
			 CLASS_CODE
		   , TITLE
		   , CATEGORY_CODE
		   , EMAIL
		   , MAX_COUNT
		   , PRICE
		   , CREATE_DATE

    	) VALUES (
    		 SEQ_CLASS_TBL.NEXTVAL
		   , #{ title }
		   , #{ categoryCode }
		   , #{ email }
		   , #{ maxCount }
		   , #{ price }
		   , SYSDATE
    	)
    </insert>
    
    <!-- 사용자가 생성한 클래스 중 가장 최근 생성한 클래스의 클래스 코드를 가져오기  by 임예람  -->
    <select id="selectClassCode" resultType="_int">
    	SELECT MAX(CLASS_CODE)
    	  FROM CLASS_TBL
    	 WHERE EMAIL = #{ email }
    </select>
    
    <!-- 사용자의 클래스 코드와 타이틀 목록 조회 하기  by 임예람  -->
    <select id="selectClassCodeList" resultType="hashmap">
    	SELECT 
    		   CLASS_CODE
    		 , TITLE
    	  FROM CLASS_TBL
    	 WHERE EMAIL = #{ email }
    	   AND IS_DELETED = 'N'
    	  ORDER BY CREATE_DATE DESC
    </select>
    
    <!-- 클래스 삭제 하기 by 임예람  -->
    <update id="deleteClass">
    	UPDATE CLASS_TBL
    	   SET IS_DELETED = 'Y'
    	 WHERE CLASS_CODE = #{ classCode }
    </update>
    
    <!-- 클래스의 정보 수정하기 by 임예람  -->
    <update id="modifyClass" parameterType="ClassDTO">
    	UPDATE CLASS_TBL
    	   SET CONTENTS = #{ contents }
    	   	 , TAG =  #{ tag } 
    	 WHERE CLASS_CODE = #{ classCode }
    </update>
    
    <!-- 목차 추가하기  by 임예람  -->
    <insert id="registLecture" parameterType="MokchaDTO">
    	INSERT INTO LECTURE_MOKCHA_TBL
    	VALUES
    	(
    		  SEQ_LECTURE_MOKCHA_TBL.NEXTVAL
    		, #{ mokchaName }
    		, SYSDATE
    		, #{ contents }
    		, #{ classCode }
    		, 'N'
    	)
    </insert>
    
    <!-- 목차에 파일 추가하기 by 임예람  -->
    <insert id="registLectureFile" parameterType="com.soomjd.soomjan.classRoom.model.dto.ClassFileDTO">
    	INSERT INTO LECTURE_FILE_TBL
    	VALUES
    	(
    		  SEQ_LECTURE_FILE_TBL.NEXTVAL
    		, SYSDATE
    		, #{ filePath }
    		, #{ orgFilePath }
    		, 'N'
    		, #{ mokchaCode }
    		, #{ email }
    	)
    </insert>
    
    <!-- 포스트 번호로 포스트 정보 조회하기 by 임예람  -->
    <select id="selectPostByPostCode" resultMap="learningPostResultMap">
    	SELECT
    		   L.POST_CODE
			 , L.WRITE_DATE
			 , L.RE_DATE
			 , L.IS_DELETED
			 , L.CONTENTS
			 , L.EMAIL
			 , L.CLASS_CODE
			 , L.TITLE
			 , J.NICKNAME
		  FROM LEARNING_TBL L
		  JOIN JANDI_TBL J ON (J.EMAIL = L.EMAIL)
		 WHERE L.POST_CODE = #{ postCode }
		   AND L.IS_DELETED = 'N'
		  ORDER BY L.WRITE_DATE DESC
    </select>
    
    <!-- 학습방 게시물 코드로 해당 게시물의 파일 목록 가져오기 by 임예람  -->
    <select id="selectLearningFileList" resultMap="fileResultMap">
    	SELECT
    		   F.FILE_PATH
			 , F.EMAIL
			 , F.ORG_FILE_PATH
			 , F.WRITE_DATE
			 , F.FILE_CODE
			 , F.POST_CODE
			 , F.IS_DELETED
			 , S.NICKNAME
		  FROM LEARNING_FILE_TBL F
		  JOIN SSACK_TBL S ON (S.EMAIL = F.EMAIL)
		 WHERE F.POST_CODE = #{ postCode }
		   AND F.IS_DELETED = 'N'
		  ORDER BY F.WRITE_DATE DESC
    </select>
    
    <!-- 해당 클래스의 목차 속 파일 가져오기  by 임예람 -->
    <select id="selectMokchaFileList" resultMap="fileResultMap">
    	SELECT
    		   F.FILE_PATH
			 , F.EMAIL
			 , F.ORG_FILE_PATH
			 , F.UPLOAD_DATE
			 , F.FILE_CODE
			 , F.MOKCHA_CODE
			 , F.IS_DELETED
			 , J.NICKNAME
		  FROM LECTURE_FILE_TBL F
		  JOIN JANDI_TBL J ON (J.EMAIL = F.EMAIL)
		  JOIN LECTURE_MOKCHA_TBL M ON (M.MOKCHA_CODE = F.MOKCHA_CODE)
		 WHERE M.CLASS_CODE = #{ classCode }
		   AND F.IS_DELETED = 'N'
    </select>
    
    <!-- 학습방 게시물 수정하기 by 임예람 -->
    <update id="modifyLearnigPost" parameterType="LearningPostDTO">
    	UPDATE LEARNING_TBL
    	   SET CONTENTS = #{ contents }
    	   	 , TITLE =  #{ title } 
    	   	 , RE_DATE = SYSDATE
    	 WHERE POST_CODE = #{ postCode }
    </update>
    
    <!-- 학습방 게시물에 첨부 파일 추가하기 by 임예람  -->
    <insert id="registLearningFile" parameterType="com.soomjd.soomjan.classRoom.model.dto.ClassFileDTO">
    	INSERT INTO LEARNING_FILE_TBL
    	VALUES
    	(
    		  #{ filePath }
    		, #{ email }
    		, #{ orgFilePath }
    		, SYSDATE
    		, SEQ_LEARNING_FILE_TBL.NEXTVAL
    		, #{ postCode }
    		, 'N'
    		
    	)
    </insert>
    
    <!-- 학습방 게시물 생성하기 by 임예람  -->
    <insert id="registLearnigPost">
    	INSERT INTO LEARNING_TBL
    	VALUES
    	(
    		  SEQ_LEARNING_TBL.NEXTVAL
    		, SYSDATE
    		, SYSDATE
    		, 'N'
    		, NULL
    		, #{ email }
    		, #{ classCode }
    		, '제목 없음'
    	)
    </insert>
    
    <!-- 사용자가 쓴 게시물 목록 중에 가장 최근에 쓴 게시물 코드 조회하기 by 임예람   -->
    <select id="selectNewPostCode" resultType="_int">
    	SELECT MAX(POST_CODE)
    	  FROM LEARNING_TBL
    	 WHERE EMAIL = #{ email }
    	   AND IS_DELETED = 'N'
    </select>
    
    <!-- 클래스 썸네일 변경하기 by 임예람  -->
    <update id="modifyClassFile" parameterType="ClassDTO">
    	UPDATE CLASS_TBL
    	   SET FILE_PATH = #{ filePath }
    	     , ORG_FILE_PATH = #{ orgFilePath }
    	WHERE CLASS_CODE = #{ classCode }
    </update>
    
    <!-- 목차 삭제하기 by 임예람  -->
    <update id="modifyLectureIsDeleted">
    	UPDATE LECTURE_MOKCHA_TBL
    	   SET IS_DELETED = 'Y'
    	 WHERE MOKCHA_CODE = #{ mokchaCode }
    </update>
    
    <!-- 해당 목차의 파일 삭제하기 by 임예람  -->
    <update id="modifyLectureFileIsDeleted">
    	UPDATE LECTURE_FILE_TBL
    	   SET IS_DELETED = 'Y'
    	 WHERE MOKCHA_CODE = #{ mokchaCode }
    </update>
    
    <!-- 해당 목차의 파일 리스트 가져오기 by 임예람  -->
    <select id="selectMokchaFileListByMokchaCode" resultMap="fileResultMap">
    	SELECT FILE_PATH
    	  FROM LECTURE_FILE_TBL
    	 WHERE MOKCHA_CODE = #{ mokchaCode }
    </select>
    
    <!-- 학습방 게시물 삭제하기 by 임예람  -->
    <update id="modifyLearnigPostIsDeleted">
    	UPDATE LEARNING_TBL
    	   SET IS_DELETED = 'Y'
    	 WHERE POST_CODE = #{ postCode }
    </update>
    
    <!-- 학습방 파일 삭제하기 by 임예람  -->
    <update id="modifyLearningFileIsDeleted">
    	UPDATE LEARNING_FILE_TBL
    	   SET IS_DELETED = 'Y'
    	 WHERE POST_CODE = #{ postCode }
    </update>
    
    <!-- 학습방 게시물 속 파일 조회하기  by 임예람 -->
    <select id="selectLearningFileListByPostCode" resultMap="fileResultMap">
    	SELECT FILE_PATH
    	  FROM LEARNING_FILE_TBL
    	 WHERE POST_CODE = #{ postCode }
    </select>
    
    <!-- 클래스 구매하기  결제 테이블, 클래스 구매 테이블 인서트 by 임예람  -->
    <insert id="registPurchaseClass" parameterType="com.soomjd.soomjan.classRoom.model.dto.ClassPurchaseDTO">
    	INSERT ALL 
		  INTO PAYMENT_TBL VALUES(
		  SEQ_PAYMENT_TBL.NEXTVAL,
		  #{ payment.pay },
		  #{ payment.bank },
		  #{ payment.owner },
		  #{ payment.account },
		  SYSDATE,
		  #{ payment.payType }
		  )
		  INTO PURCHASE_CLASS_TBL VALUES(
		  #{ email },
		  #{ classCode },
		  'Y',
		  SEQ_PAYMENT_TBL.CURRVAL,
		  SEQ_PURCHASE_CLASS_TBL.NEXTVAL,
		  SYSDATE + 30
		  )SELECT * 
		   FROM DUAL
    </insert>
    
    <!-- 채팅방 생성하기 클래스 작성자, 클래스 구매자 by 임예람  -->
    <insert id="registChatRoom" parameterType="hashmap">
    	INSERT ALL 
		   INTO CLASS_CHAT_ROOM_TBL VALUES(
		   SEQ_CLASS_CHAT_ROOM_TBL.NEXTVAL,
		   #{ jandiEmail },
		   #{ classCode }
		   )
		   INTO CLASS_CHAT_ROOM_TBL VALUES(
		   SEQ_CLASS_CHAT_ROOM_TBL.CURRVAL,
		   #{ email },
		   #{ classCode }
		   )SELECT * 
		    FROM DUAL
    </insert>
    
    <!-- 해당 클래스 채팅방에서 사용자의 채팅방 조회하기 by 임예람   -->
    <select id="selectClassChatBySSACKEmail" parameterType="hashmap" resultType="hashmap">
    	SELECT C.CHAT_CODE
    	  FROM CLASS_CHAT_ROOM_TBL C
    	  JOIN SSACK_TBL S ON (C.EMAIL = S.EMAIL)
    	 WHERE C.CLASS_CODE = #{ classCode }
    	   AND C.EMAIL = #{ email }
    </select>
    
    <!-- 신고 문구 조회 하기 by 임예람  -->
    <select id="selectAllReportStatement" resultType="hashmap">
    	select * FROM REPORT_STATEMENT_TBL
    </select>
    
    <!-- 회원 신고 하기 by 임예람  -->
    <insert id="registReportMember" parameterType="com.soomjd.soomjan.member.model.dto.ReportMemberDTO">
    	INSERT INTO 
    	REPORT_MEMBER_TBL(
			      EMAIL
			   , REP_CODE
			   , CONTENTS
			   , REP_DATE
			   , IMG_PATH
			   , REP_EMAIL
			   , REP_TYPE_CODE
			   , ORG_IMG_PATH
			   , REP_YN
			   
			)VALUES(
			   #{ email }
			   , SEQ_REPORT_MEMBER.NEXTVAL
			   , #{ contents }
			   , SYSDATE
			   , #{ imgPath }
			   , #{ repEmail }
			   , #{ repTypeCode }
			   , #{ orgImgPath }
			   , 'W'
			)
    </insert>
    
    <!-- 해당 클래스의 학습방 목록 전체 개수 조회하기 by 양효진  -->
    <select id="selectLearningBoardTotalCount" resultType="_int" parameterType="HashMap">
    	SELECT
    	       COUNT(*)
    	  FROM LEARNING_TBL
    	 WHERE CLASS_CODE = #{ classCode }
    	   AND IS_DELETED = 'N'
    </select>
    
    <!-- 해당 클래스의 리뷰 목록 개수 조회하기 by 임예람  -->
    <select id="selectReviewListByClassCodeTotalCount" resultType="_int">
    	SELECT
    	       COUNT(*)
    	  FROM CLASS_REVIEW_TBL
    	 WHERE CLASS_CODE = #{ classCode }
    	   AND IS_DELETED = 'N'
    </select>
    
    <!-- 해당 클래스의 리뷰 목록 조회하기 by 임예람  -->
    <select id="selectReviewListByClassCode" parameterType="hashmap" resultMap="reviewResultMap">
    	SELECT
    	      B.RNUM
   	     	, B.REVIEW_CODE
			, B.WRITE_DATE
			, B.STAR
			, B.CONTENTS
			, B.IS_DELETED
			, B.CLASS_CODE
			, B.EMAIL
			, B.NICKNAME
    	 FROM (SELECT ROWNUM RNUM
    	 	        , A.REVIEW_CODE
					, A.WRITE_DATE
					, A.STAR
					, A.CONTENTS
					, A.IS_DELETED
					, A.CLASS_CODE
					, A.EMAIL
					, A.NICKNAME
    	 	     FROM (SELECT
    	 	     			  CR.REVIEW_CODE
							, CR.WRITE_DATE
							, CR.STAR
							, CR.CONTENTS
							, CR.IS_DELETED
							, CR.CLASS_CODE
							, CR.EMAIL
							, SS.NICKNAME
    	 	     	     FROM CLASS_REVIEW_TBL CR
    	 	     	     JOIN SSACK_TBL SS ON ( SS.EMAIL = CR.EMAIL )
    	 	     	   	WHERE CR.CLASS_CODE = #{ classCode }
    	 	     	      AND CR.IS_DELETED = 'N'
						<if test="selectCriteria.searchCondition == null">
							ORDER BY CR.WRITE_DATE DESC
						</if>
						<if test="selectCriteria.searchCondition == 'recently'">
							ORDER BY CR.WRITE_DATE DESC
						</if>
						<if test="selectCriteria.searchCondition == 'starDESC'">
							ORDER BY CR.STAR DESC
						</if>
						<if test="selectCriteria.searchCondition == 'starASC'">
							ORDER BY CR.STAR ASC
						</if>
    	 	     ) A
    	    <![CDATA[
	        WHERE ROWNUM <= #{ selectCriteria.endRow } 
	        ]]>	
		  	) B
		  	WHERE B.RNUM >= #{ selectCriteria.startRow } 
    </select>
    
    <!-- 해당 클래스의 리뷰 평점 조회하기 by 임예람  -->
    <select id="selectAvgReviewStar" resultType="_double">
    	SELECT AVG(STAR)
    	  FROM CLASS_REVIEW_TBL
    	 WHERE CLASS_CODE = #{ classCode }
    	   AND IS_DELETED = 'N'
    </select>
     
     <!-- 해당 클래스의 목차 개수 조회하기 by 양효진 -->
    <select id="selectClassLectureTotalCount" resultType="_int" parameterType="HashMap">
    	SELECT
    	       COUNT(*)
    	  FROM LECTURE_MOKCHA_TBL
    	 WHERE CLASS_CODE = #{ classCode }
    	   AND IS_DELETED = 'N'
    </select>
    
    <!-- 해당 클래스의 조회수 올리기  by 권순표  -->
    <update id="viewsUp" parameterType="HashMap">
        UPDATE 
		       CLASS_TBL A 
		   SET A.VIEWS = A.VIEWS + 1
		   <where>
		       A.CLASS_CODE = #{ classCode }
		    <if test='email != null'>
		        AND A.EMAIL <![CDATA[ <> ]]> #{ email }   
		    </if>
		    </where>
		   
    </update>
    
    <!-- 목차의 타이틀 5개만 조회하기 by 임예람  -->
    <select id="selectMokchaTitleList" resultMap="mokchaResultMap">
    	 SELECT M.MOKCHA_CODE
    	      , M.MOKCHA_NAME
           	  , ROWNUM
    	 FROM  LECTURE_MOKCHA_TBL M
    	WHERE  M.IS_DELETED = 'N'
    	  AND  M.CLASS_CODE = #{ classCode }
        AND ROWNUM BETWEEN 1 AND 5
    	ORDER BY M.WRITE_DATE ASC
    </select>
    
    <!-- 클래스 신고 하기 by 임예람   -->
    <insert id="registReportClass" parameterType="hashmap">
    	INSERT INTO REPORT_CLASS_TBL(
			   REP_CODE
			   , EMAIL
			   , REP_CONTENTS
			   , CLASS_CODE
			   , REP_DATE
			   , REP_TYPE_CODE
			   , REP_YN
			)VALUES(
			   SEQ_REPORT_CLASS.NEXTVAL
			   , #{ email }
			   , #{ repContents }
			   , #{ repClass }
			   , SYSDATE
			   , #{ repTypeCode }
			   , 'W'
			)
    </insert>
    
    <!-- 해당 클래스를 찜한 회원 목록 가져오기 by 임예람  -->
    <select id="selectJJimClassMemberList" resultType="hashmap">
    	SELECT * FROM LIKED_CLASS_TBL
    	 WHERE CLASS_CODE = #{ classCode }
    </select>
    
    <!-- 찜한 클래스에 등록하기 by 임예람  -->
    <insert id="registLikedClass">
    	INSERT INTO
    		   LIKED_CLASS_TBL VALUES(
    		   #{ email }
    		 , #{ classCode }	
    	)
    </insert>
    
    <!-- 찜한 클래스에서 샂게(해지)하기  by 임예람 -->
    <delete id="removeLikedClass">
    	DELETE FROM LIKED_CLASS_TBL
    	 WHERE EMAIL = #{ email }
    	   AND CLASS_CODE = #{ classCode }
    </delete>
    
</mapper>