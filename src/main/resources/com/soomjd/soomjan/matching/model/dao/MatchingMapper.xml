<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.soomjd.soomjan.matching.model.dao.MatchingMapper">

	<!-- 새싹이 보는 견적서 디테일 or 그냥 견적서 디테일 기본 -->
    <resultMap id="estimateList" type="EstimateDTO">
        <id column="ESTIMATE_CODE" property="estimateCode"/>
        <result column="CATEGORY_CODE" property="categoryCode"/>
        <result column="IS_MATCHED" property="isMatched"/>
        <result column="WRITE_DATE" property="writeDate"/>
        <result column="TITLE" property="title"/>
        <result column="CONTENTS" property="contents"/>
        <result column="EMAIL" property="email"/>
        <result column="IS_DELETED" property="isDeleted"/>
        <result column="RNUM" property="rnum"/>
        
         <association property="categoryDTO" resultMap="categoryList"/>
       <!--  <collection property="categoryName" javaType="java.util.ArrayList" resultMap="categoryList" /> -->
    </resultMap>
   
    
    <resultMap id="categoryList" type="CategoryDTO">
    	<id column="CATEGORY_CODE" property="categoryCode"/>
    	<result column="CATEGORY_NAME" property="categoryName"/>
    </resultMap>
    
    <!-- 잔디가 보는 견적서 디테일 -->
     <resultMap id="estimateDetailList" type="EstimateDTO">
        <id column="ESTIMATE_CODE" property="estimateCode"/>
        <result column="CATEGORY_CODE" property="categoryCode"/>
        <result column="IS_MATCHED" property="isMatched"/>
        <result column="WRITE_DATE" property="writeDate"/>
        <result column="TITLE" property="title"/>
        <result column="CONTENTS" property="contents"/>
        <result column="EMAIL" property="email"/>
        <result column="IS_DELETED" property="isDeleted"/>
        
       <association property="categoryDTO" resultMap="categoryList"/>
       <association property="memberDTO" resultMap="memberDTO"/>
   
    </resultMap>
    
    
    
    <resultMap id="memberDTO" type="MemberDTO">
    	<id column="EMAIL" property="email"/>
    	<result column="NICKNAME" property="nickName"/>	
    </resultMap>
    
    <!-- 매칭 채팅방 정보 -->
    <resultMap id="matchedChatting" type="MatchedChattingDTO">
    	<id column="MATCHED_CODE" property="matchedCode"/>
    	<result column="ESTIMATE_CODE" property="estimateCode"/>
    	<result column="EMAIL" property="email"/>
    	
    </resultMap>
    
    
    <insert id="registEstimate" parameterType="EstimateDTO">
        INSERT
		  INTO ESTIMATE_TBL
		(
		 ESTIMATE_CODE
 	 	,CATEGORY_CODE
		,IS_MATCHED
		,WRITE_DATE
		,TITLE
		,CONTENTS
		,EMAIL
		,IS_DELETED
		)
		VALUES
		(
		  SEQ_ESTIMATE_TBL.NEXTVAL
		, #{ categoryCode }
		, DEFAULT
		, SYSDATE
		, #{ title }
		, #{ contents }
		, #{ email }
		, DEFAULT
		)
    </insert>
    
    <select id="selectCategory" resultMap="categoryList">
        SELECT
		       CATEGORY_CODE
		     , CATEGORY_NAME
		  FROM CATEGORY_TBL
    </select>
    
    <select id="selectEstimate" resultMap="estimateList">
        SELECT
    		   C.RNUM
    		 , C.ESTIMATE_CODE
		     , C.TITLE
		     , C.IS_MATCHED
		  FROM (SELECT ROWNUM RNUM
		   		, B.ESTIMATE_CODE
		   		, B.TITLE
		    	, B.IS_MATCHED
		    	FROM(SELECT 
		    	     A.ESTIMATE_CODE
		    	   , A.TITLE
		    	   , A.IS_MATCHED
		    	   FROM ESTIMATE_TBL A
		    	   WHERE A.EMAIL = #{ searchValue }
                   ORDER BY A.ESTIMATE_CODE DESC
                   )B 
                   <![CDATA[
	        	WHERE ROWNUM <= #{ endRow } 
	        	]]>	
	        	<!-- ORDER BY B.ESTIMATE_CODE DESC  -->
              ) C
              WHERE C.RNUM >= #{ startRow }
                
                   
    
    </select>
    
    
    <select id="estimateMainJ" resultMap="estimateList">
        SELECT
    		   C.RNUM
    		 , C.ESTIMATE_CODE
		     , C.TITLE
		     , C.IS_MATCHED
		  FROM (SELECT ROWNUM RNUM
		   		, B.ESTIMATE_CODE
		   		, B.TITLE
		    	, B.IS_MATCHED
		    	FROM(SELECT 
		    	     A.ESTIMATE_CODE
		    	   , A.TITLE
		    	   , A.IS_MATCHED
		    	   FROM ESTIMATE_TBL A
                   ORDER BY A.ESTIMATE_CODE DESC
                   )B 
                   <![CDATA[
	        	WHERE ROWNUM <= #{ endRow } 
	        	]]>	
              ) C
              WHERE C.RNUM >= #{ startRow }
                
    </select>
    
    
     <!-- 새싹이 보는 견적서 디테일 -->
    <select id="estimateDetail" resultMap="estimateList" >
    	SELECT
		       E.ESTIMATE_CODE
		     , C.CATEGORY_NAME
		     , E.IS_MATCHED
		     , E.WRITE_DATE
		     , E.TITLE
		     , E.CONTENTS
		     , E.EMAIL
		  FROM ESTIMATE_TBL E
		  JOIN CATEGORY_TBL C ON (E.CATEGORY_CODE = C.CATEGORY_CODE)
		 WHERE ESTIMATE_CODE = #{ estimateCode }
    </select>
    
     <!-- 잔디가 보는 견적서 디테일 -->
     <select id="estimateDetailJ" resultMap="estimateDetailList" >
    	SELECT
		       E.ESTIMATE_CODE
		     , C.CATEGORY_NAME
		     , E.IS_MATCHED
		     , E.WRITE_DATE
		     , E.TITLE
		     , E.CONTENTS
		     , S.NICKNAME
		     , E.EMAIL
		  FROM ESTIMATE_TBL E
		  JOIN CATEGORY_TBL C ON (E.CATEGORY_CODE = C.CATEGORY_CODE)
		  JOIN SSACK_TBL S ON (E.EMAIL = S.EMAIL)
		 WHERE ESTIMATE_CODE = #{ estimateCode }
    </select> 
    
   
    
    
    <select id="selecetMainTotal" resultType="_int">
    
    	SELECT
    		   COUNT(*)
    	  FROM ESTIMATE_TBL
    	 <!-- WHERE EMAIL = #{ email } -->
    </select>
    
    <select id="selecetEstimateTotal" resultType="_int">
    
    	SELECT
    		   COUNT(*)
    	  FROM ESTIMATE_TBL
    </select>
    
    
    <select id="ssackList" resultMap="estimateList">
        SELECT
    		   C.RNUM
    		 , C.ESTIMATE_CODE
		     , C.TITLE
		     , C.IS_MATCHED
		  FROM (SELECT ROWNUM RNUM
		   		, B.ESTIMATE_CODE
		   		, B.TITLE
		    	, B.IS_MATCHED
		    	FROM(SELECT 
		    	     A.ESTIMATE_CODE
		    	   , A.TITLE
		    	   , A.IS_MATCHED
		    	   FROM ESTIMATE_TBL A
		    	   WHERE A.EMAIL = #{ searchValue }
                   ORDER BY A.ESTIMATE_CODE DESC
                   )B 
                   <![CDATA[
	        	WHERE ROWNUM <= #{ endRow } 
	        	]]>	
              ) C
              WHERE C.RNUM >= #{ startRow }
                
    </select>
    
    <select id="matchedChatting" resultMap="matchedChatting" parameterType="MatchedChattingDTO">
    	SELECT
    		   MATCHED_CODE
    	  FROM MATCHED_TBL
     	 WHERE ESTIMATE_CODE = #{ estimateCode }
     	   AND EMAIL = #{email}
    
    </select>
    
    <insert id="registChattingRoom" parameterType="hashmap">
    	INSERT ALL 
         INTO MATCHED_TBL VALUES(
         SEQ_MATCHED_TBL.NEXTVAL,
         #{ matchedChatting.estimateCode },
         #{ matchedChatting.email }
         )
         INTO MATCHED_TBL VALUES(
         SEQ_MATCHED_TBL.CURRVAL,
         #{ matchedChatting.estimateCode },
         #{ writeEmail }
         )SELECT * 
          FROM DUAL
    	
    </insert>
    
    
    <update id="updateMatched" parameterType="_int">
    
		UPDATE ESTIMATE_TBL 
		SET 
		IS_MATCHED = 'Y'
		WHERE ESTIMATE_CODE  = #{ estimateCode }
    
    </update>
    
    
    <select id="chatEstimateCode" resultType="hashmap">
    	
    	SELECT M.MATCHED_CODE,
       M.EMAIL,
       M.ESTIMATE_CODE,
       J.NICKNAME,
       J.PROFILE_PATH
 		  FROM MATCHED_TBL M
		  JOIN JANDI_TBL J ON(J.EMAIL = M.EMAIL)
		 WHERE M.MATCHED_CODE IN (SELECT MA.MATCHED_CODE FROM MATCHED_TBL MA WHERE MA.EMAIL = #{ jmail })
		   AND M.EMAIL != #{ jmail }
    
    
    
    </select>
    
    
    <select id="jandiProfileAndName" resultType="hashmap">
    	
    	SELECT E.ESTIMATE_CODE
		  	 , J.EMAIL
		  	 , J.NICKNAME 
		  	 , J.PROFILE_PATH 
		  	 , M.MATCHED_CODE
		  FROM ESTIMATE_TBL E
		  JOIN MATCHED_TBL M ON (E.ESTIMATE_CODE = M.ESTIMATE_CODE)
		  JOIN JANDI_TBL J ON(M.EMAIL = J.EMAIL)
		 WHERE J.EMAIL != #{ email }
		   AND E.ESTIMATE_CODE = #{ estimateCode }
    
    </select>
    
    
    <select id="selectMyChatList" resultType="hashmap">
    
    	SELECT M.MATCHED_CODE,
       M.EMAIL,
       M.ESTIMATE_CODE,
       J.NICKNAME,
       J.PROFILE_PATH,
       E.TITLE
 		  FROM MATCHED_TBL M
		  JOIN JANDI_TBL J ON(J.EMAIL = M.EMAIL)
		  JOIN ESTIMATE_TBL E ON(E.ESTIMATE_CODE = M.ESTIMATE_CODE)
		 WHERE M.MATCHED_CODE IN (SELECT MA.MATCHED_CODE FROM MATCHED_TBL MA WHERE MA.EMAIL = #{ myEmail })
		   AND M.EMAIL != #{ myEmail }
    
    </select>

</mapper>